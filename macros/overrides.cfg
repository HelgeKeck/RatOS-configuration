[gcode_macro M84]
rename_existing: M84.1
gcode:
	# turn motors off
	M84.1

	# IDEX
	{% if printer["dual_carriage"] is defined %}
		# reset is_printing_gcode state
		SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=is_printing_gcode VALUE=False
		# reset applied toolhead offset index
		_SET_TOOLHEAD_OFFSET T={printer["gcode_macro RatOS"].default_toolhead|int} MOVE=0
		# reset pressure advance toolhead syncing
		SET_GCODE_VARIABLE MACRO=SET_PRESSURE_ADVANCE VARIABLE=snyc_toolheads VALUE=False
		# reset swapped toolheads mode
		SET_GCODE_VARIABLE MACRO=_IDEX_REMAP_TOOLHEADS VARIABLE=enabled VALUE=False
		# reset spool join mode
		SET_GCODE_VARIABLE MACRO=_IDEX_JOIN_SPOOLS VARIABLE=enabled VALUE=False
		# reset offsets
		# this is a temporarily safety measurement and very anoying
		# to ensure we start the next print with known offsets 
		# the anoying part is that when you do live first layer z-offset baby steps, 
		# the value is gone after a M84 and you cant save it 
		# and probably some other side effects as well 
		SET_GCODE_OFFSET X=0 Y=0 Z=0 MOVE=0
		# activate IDEX default
		_IDEX_SINGLE INIT=1
	{% endif %}

	# visual feedback
	_LED_MOTORS_OFF


# do not call M104 from within RatOS macros
# use SET_HEATER_TEMPERATURE instead 
[gcode_macro M104]
rename_existing: M104.1
gcode:
	# parameter
	{% set s = params.S|default(0)|int %}
	{% set t = params.T|default(-1)|int %}
	{% set t = 0 if t == -1 else t %}

	DEBUG_ECHO PREFIX="M104" MSG="s: {s}, t: {t}"

	# set temperature offset
	{% if printer["gcode_macro T%s" % t] is defined %}
		{% set temperature_offset = printer["gcode_macro T%s" % t].temperature_offset|default(0)|int %}
		{% set s = [s + temperature_offset, 0]|max %}
		{% if temperature_offset != 0 %}
			RATOS_ECHO PREFIX="M104" MSG="Temperature offset of {temperature_offset}째C added to toolhead T{t}."
		{% endif %}
	{% endif %}

	# handle idex toolhead standby
	{% set is_in_standby = false %}
	{% if printer["dual_carriage"] is defined %}
		{% set toolchange_standby_temp = printer["gcode_macro RatOS"].toolchange_standby_temp|default(-1)|float %}
		{% if toolchange_standby_temp > -1 %}
			{% set is_in_standby = true if printer["gcode_macro T%s" % t].standby|default(false)|lower == 'true' else false %}
		{% endif %}
	{% endif %}

	# call klipper base function
	{% if not is_in_standby %}
		M104.1 S{s} T{t}
	{% endif %}


# do not call M109 from within RatOS macros
# use TEMPERATURE_WAIT instead 
[gcode_macro M109]
rename_existing: M109.1
gcode:
	# parameter
	{% set s = params.S|default(0)|int %}
	{% set t = params.T|default(-1)|int %}
	{% set t = 0 if t == -1 else t %}

	DEBUG_ECHO PREFIX="M109" MSG="s: {s}, t: {t}"

	# set temperature offset
	{% if printer["gcode_macro T%s" % t] is defined %}
		{% set temperature_offset = printer["gcode_macro T%s" % t].temperature_offset|default(0)|int %}
		{% set s = [s + temperature_offset, 0]|max %}
		{% if temperature_offset != 0 %}
			RATOS_ECHO PREFIX="M109" MSG="Temperature offset of {temperature_offset}째C added to toolhead T{t}."
		{% endif %}
	{% endif %}

	# handle idex toolhead standby
	{% set is_in_standby = false %}
	{% if printer["dual_carriage"] is defined %}
		{% set toolchange_standby_temp = printer["gcode_macro RatOS"].toolchange_standby_temp|default(-1)|float %}
		{% if toolchange_standby_temp > -1 %}
			{% set is_in_standby = true if printer["gcode_macro T%s" % t].standby|default(false)|lower == 'true' else false %}
		{% endif %}
	{% endif %}

	# call klipper base function
	{% if not is_in_standby %}
		M109.1 S{s} T{t}
	{% endif %}


[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: SET_HEATER_TEMPERATURE_BASE
gcode:
	# parameter
	{% set heater = params.HEATER|default("") %}
	{% set target = params.TARGET|default(0)|int %}

	DEBUG_ECHO PREFIX="SET_HEATER_TEMPERATURE" MSG="heater: {heater}, target: {target}"

	{% if heater|lower == "extruder" or heater|lower == "extruder1" %}
		# get physical toolhead
		{% set t = 0 if heater|lower == "extruder" else 1 %}

		# set temperature offset
		{% if printer["gcode_macro T%s" % t] is defined and target > 0 %}
			{% set temperature_offset = printer["gcode_macro T%s" % t].temperature_offset|default(0)|int %}
			{% set target = [target + temperature_offset, 0]|max %}
			{% if temperature_offset != 0 %}
				RATOS_ECHO PREFIX="SET_HEATER_TEMPERATURE" MSG="Temperature offset of {temperature_offset}째C added to toolhead T{t}."
			{% endif %}
		{% endif %}

	{% endif %}

	# call klipper base function
	SET_HEATER_TEMPERATURE_BASE HEATER={heater} TARGET={target}


[gcode_macro TEMPERATURE_WAIT]
rename_existing: TEMPERATURE_WAIT_BASE
gcode:
	# parameter
	{% set sensor = params.SENSOR|default("") %}
	{% set minimum = params.MINIMUM|default(-1)|int %}
	{% set maximum = params.MAXIMUM|default(-1)|int %}

	DEBUG_ECHO PREFIX="TEMPERATURE_WAIT" MSG="sensor: {sensor}, minimum: {minimum}, maximum: {maximum}"

	{% if sensor|lower == "extruder" or sensor|lower == "extruder1" %}
		# get physical toolhead
		{% set t = 0 if sensor|lower == "extruder" else 1 %}

		# set temperature offset
		{% if printer["gcode_macro T%s" % t] is defined and (minimum > 0 or maximum > 0) %}
			{% set temperature_offset = printer["gcode_macro T%s" % t].temperature_offset|default(0)|int %}
			{% if minimum > -1 %}
				{% set minimum = [minimum + temperature_offset, 0]|max %}
			{% endif %}
			{% if maximum > -1 %}
				{% set maximum = [maximum + temperature_offset, 0]|max %}
			{% endif %}
			{% if temperature_offset != 0 %}
				RATOS_ECHO PREFIX="TEMPERATURE_WAIT" MSG="Temperature offset of {temperature_offset}째C added to toolhead T{t}."
			{% endif %}
		{% endif %}

	{% endif %}

	# call klipper base function
	{% if minimum > -1 and maximum > -1 %}
		RATOS_ECHO PREFIX="TEMPERATURE_WAIT" MSG="Waiting for sensor: {sensor}, MINIMUM: {minimum}, MAXIMUM: {maximum}"
		TEMPERATURE_WAIT_BASE SENSOR="{sensor}" MINIMUM={minimum} MAXIMUM={maximum}
	{% elif minimum > -1 and maximum == -1 %}
		RATOS_ECHO PREFIX="TEMPERATURE_WAIT" MSG="Waiting for sensor: {sensor}, MINIMUM: {minimum}"
		TEMPERATURE_WAIT_BASE SENSOR="{sensor}" MINIMUM={minimum}
	{% elif minimum == -1 and maximum > -1 %}
		RATOS_ECHO PREFIX="TEMPERATURE_WAIT" MSG="Waiting for sensor: {sensor}, MAXIMUM: {maximum}"
		TEMPERATURE_WAIT_BASE SENSOR="{sensor}" MAXIMUM={maximum}
	{% endif %}
	RATOS_ECHO PREFIX="TEMPERATURE_WAIT" MSG="Temperature for toolhead T{t} reached."
